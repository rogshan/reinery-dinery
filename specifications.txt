specifications.txt
a text file which contains the specifications for each operation
Author: Ciara Sookarry
Date: 29/11/19

////////////////////////////////
- functionName()
- Description of the function

- Parameters:
- Returns:

Steps:
 - A numbered step by step pseudocode walkthrough of how functions works
    

////////////////////////////////
- createPoly()
- Creates a polynomial

- Parameters: the coefficients of each term in the polynomial -AN ARRAY MAYBE?
- Output: a polynomial of type polynomial

////////////////////////////////
- deletePoly()
- deletes a previously created polynomial

- Parameters:poly1 - the polynomial to be deleted
- Returns: void

Steps:
1) Start at the head node
2) Make sure the next node isn't the tail node
3) While the next node isn't the tail
4) Set the next node equal to a variable
5) Change the node that the head points to to the node after the next node
6) Delete the next node
7) If the next node is the tail, delete the head
8) Delete the polynomial itself


- addPoly()
- adds 2 polynomials together by adding their coefficients

- Parameters: 2 polynomials with coefficients of type double
- Output: void

Steps:
1) If power of 1st polynomial is greater then 2nd, then store 1st as it is and move its pointer 
2) If power of 2nd polynomial is greater then 1st, then store 2nd as it is and move its pointer 
3) If power of both polynomial numbers is same then add their coefficients 
4) Dynamically create new node 
5) Display Linked list 

////////////////////////////////
- subtractPoly()
- subtracts one polynomial from another by subtracting coefficients
- Parameters: 2 polynomials with coefficients of type double
- Output: the result of subtracting one polynomial from the other as a poly

Steps:
1) If power of 1st polynomial is greater then 2nd, then store 1st as it is and move its pointer 
2) If power of 2nd polynomial is greater then 1st, then store 2nd as it is and move its pointer 
3) If power of both polynomial numbers is same then subtract their coefficients 
4) Dynamically create new node 
5) Display Linked list 
////////////////////////////////
- multiplyPoly()
- Multiplies a polyinomial by a double
- Multiplies the coefficient of each term by the double
- Parameters: - a polynomial with coefficients of type double
  	  - a double value to multiply by
- Returns: the result of multiplying the polynomial by the double

Steps:
 1) Multiply the coefficient of both polynomials and store it in coeff 
 2) Add the power of both polynomials and store it in power 
 3) Invoke  function to create  a new node by passing three parameters 
 4) Move the pointer of 2nd polynomial  two get its next term 
 5) Move the pointer of 1st polynomial
 6) The removeDuplicates  function will be invoked to add the coefficient of the elements having same power from the resultant linked list 

////////////////////////////////
- dividePoly()
- Divides a polyinomial by a double
- Divides the coefficient of each term by the double
- Parameters: - a polynomial with coefficients of type double
  	  - a double value to divide by
- Returns: the result of dividing the polynomial by the double

Steps:
1) Divide the coefficient of both polynomials and store it in coeff 
2) Subtract the power of both polynomials and store it in power 
3) Invoke addnode function to create a newnode by passing three parameters
4) Move the pointer of 2nd polynomial two get its next term 
5) Move the pointer of 1st polynomial 
6) The removeDuplicatesfunction will be invoke to add the coefficients of the elements having same power from the resultant linked list 
///////////////////////////////
- normalisePoly()
- Divides each term by coefficient of the highest order term
- Parameters: a polynomial of order n with coefficients of type double
- Returns: polynomial with coefficient of the highest order term = 1

//////////////////////////////
- returnOrder()
- returns the highest power of x in the polynomial

- Parameters: *poly1 - pointer to a valid polynomial 
- Returns: the highest power of x in the polynomial

Steps:
1) Start at the head node
2) Go to the next node - this will have the highest power of x
3) Return the highest power of x

/////////////////////////////
- printPoly()
- Prints a given polynomial to the terminal

- Parameters: *poly - pointer to a valid polynomial 
- Returns: void

Steps:
1) Start at head node
2) While the current node is not the tail, iterate through each term
3) If the coefficient of a term >0 print a plus sign followed by the term
4) If the coefficient of a term <0 print the term with no sign
    This is because a negative coefficient has a sign included
