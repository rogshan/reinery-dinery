specifications.txt
a text file which contains the specifications for each operation
Author: Ciara Sookarry, Aoife O'Doherty, Anna Shaughnessy
Date: 4/12/19


////////////////////////////////
stnode data type
- Represents one term of a polynomial as a node in a link list
- Uses a dummy variable n so that an element can also be of type stnode

- Elements: double coeff - the coefficient of the term represented by the node
            int pow      - the power of the x in the term
	    *nextptr     - a pointer to the next node/term of the polynomial

////////////////////////////////
polynomial data type
- Represents a polynomial as a link list where each node is a term

- Elements: *head    - a pointer to the head node
            *current - a pointer to the current node

/////////////////////////////////
enum llError
- Provides feedback on the outcome of certain operations

- Returns: ok          - all is good
           noMemory    - memory allocation failed
	   illegalNode - the operation cannot be performed on this node

////////////////////////////////
- createPoly()
- Creates an empty polynomial

- Parameters: none
- Output: Success: a pointer to the polynomial
          Failure: NULL

Steps:
1) Allocate memory for the polynomial
2) Check if memory was successfully allocated
3) If successful, try to allocate memory for the head
4) If successful, point head to tail and make head the current node
5) If failed, de-allocate the memory for the polynomial
6) Set the polynomial to NULL

/////////////////////////////////
- addNode()
- adds a node/term to the polynomial after the current node
//
// Parameters: stnode - data to be contained in the new node
//             poly1  - polynomial in which to add new node
// Returns: Success: ok
//          Failure: noMemory

Steps:
1) Allocate memory for a new node
2) If allocations fails, return noMemory
3) If allocation successful, add data to the new node
4) Change the successor to the current node to the successor of the new node
5) Set the successor of the current node to the new node
6) return ok

////////////////////////////////
- deletePoly()
- deletes a previously created polynomial

- Parameters:poly1 - the polynomial to be deleted
- Returns: void

Steps:
1) Start at the head node
2) Make sure the next node isn't the tail node
3) While the next node isn't the tail
4) Set the next node equal to a variable
5) Change the node that the head points to to the node after the next node
6) Delete the next node
7) If the next node is the tail, delete the head
8) Delete the polynomial itself

////////////////////////////////
- addPoly()
- adds 2 polynomials together by adding their coefficients

- Parameters: 2 polynomials with coefficients of type double
- Output: void

Steps:
1) If power of 1st polynomial is greater then 2nd, then store 1st as it is and move its pointer 
2) If power of 2nd polynomial is greater then 1st, then store 2nd as it is and move its pointer 
3) If power of both polynomial numbers is same then add their coefficients 
4) Dynamically create new node 
5) Display Linked list 

////////////////////////////////
- subtractPoly()
- subtracts one polynomial from another by subtracting coefficients

- Parameters: 2 polynomials with coefficients of type double
- Output: the result of subtracting one polynomial from the other as a poly

Steps:
1) If power of 1st polynomial is greater then 2nd, then store 1st as it is and move its pointer 
2) If power of 2nd polynomial is greater then 1st, then store 2nd as it is and move its pointer 
3) If power of both polynomial numbers is same then subtract their coefficients 
4) Dynamically create new node 
5) Display Linked list

////////////////////////////////
- multiplyPoly()
- Multiplies a polyinomial by a double
- Multiplies the coefficient of each term by the double

- Parameters: - a polynomial with coefficients of type double
  	  - a double value to multiply by
- Returns: the result of multiplying the polynomial by the double

Steps:
 1) Multiply the coefficient of both polynomials and store it in coeff 
 2) Add the power of both polynomials and store it in power 
 3) Invoke  function to create  a new node by passing three parameters 
 4) Move the pointer of 2nd polynomial to get its next term 
 5) Move the pointer of 1st polynomial
 6) The removeDuplicates  function will be invoked to add the coefficient of the elements having same power from the resultant linked list 

////////////////////////////////
- dividePoly()
- Divides a polyinomial by a double
- Divides the coefficient of each term by the double

- Parameters: - a polynomial with coefficients of type double
  	  - a double value to divide by
- Returns: the result of dividing the polynomial by the double

Steps:
1) Divide the coefficient of both polynomials and store it in coeff 
2) Subtract the power of both polynomials and store it in power 
3) Invoke addnode function to create a newnode by passing three parameters
4) Move the pointer of 2nd polynomial to get its next term 
5) Move the pointer of 1st polynomial 
6) The removeDuplicatesfunction will be invoke to add the coefficients of the elements having same power from the resultant linked list 

////////////////////////////////
- normalisePoly()
- Function to divide all coefficients of a polynomial by the coefficient for the highest exponent (so coefficient for highest exponent is 1)

- Parameters:*poly1 ( a polynomial of order n with coefficients of type double)
- Returns:*poly5 (polynomial with coefficient of the highest order term = 1)

Steps:
1) Create int coeff and power.
2) Declare int a equal to the current (head) coefficient of the 'polynomial' linked list
3) While the current node is not equal to NULL, int coeff is equal to the current node's coefficient divided by int a
4) pow does not change for that node
5) New linked list polynomial poly5 is added with new coefficients
6) Pointer is moved to the next term in polynomial poly1

//////////////////////////////
- returnOrder()
- returns the highest power of x in the polynomial

- Parameters: *poly1 - pointer to a valid polynomial 
- Returns: the highest power of x in the polynomial

Steps:
1) Start at the head node
2) Go to the next node - this will have the highest power of x
3) Return the highest power of x

/////////////////////////////
- printPolynomial()
- Prints a given polynomial to the terminal

- Parameters: *poly - pointer to a valid polynomial 
- Returns: void

Steps:
1) Start at head node
2) While the current node is not the tail, iterate through each term
3) If the coefficient of a term >0 print a plus sign followed by the term
4) If the coefficient of a term <0 print the term with no sign
    This is because a negative coefficient has a sign included
